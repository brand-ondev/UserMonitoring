type User {
  id: String!
  email: String!
  role: Role!
  countries: [Country!]!
  userMonitoring: [UserMonitoring!]!
}

type Role {
  id: String!
  name: String!
}

input UserInput {
  email: String!
  roleId: String!
}

type GetUser {
  id: String!
  email: String!
  role: Role!
  countries: [Country!]!
  userMonitoring: [UserMonitoring!]!
}

union GetUserResult = User | InvalidEmailError | NotFoundError | InvalidDateError

extend type Query {
  getUserByEmail(email: String!): GetUserResult
  getAllUsers: [User!]!
}

extend type Mutation {
  createUser(data: UserInput!): User!
}